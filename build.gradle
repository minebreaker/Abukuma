subprojects {
    group = 'rip.deadcode.abukuma3'

    version = '0.1.0-EXPERIMENTAL'

    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'jacoco'

    repositories {
        mavenCentral()
        maven {
            url = "https://maven.pkg.github.com/minebreaker/Izvestia"
            credentials {
                username = project.hasProperty("GITHUB_USER") ? GITHUB_USER : ''
                password = project.hasProperty("GITHUB_TOKEN") ? GITHUB_TOKEN : ''
            }
        }
    }

    dependencies {
        testImplementation(
                'org.junit.jupiter:junit-jupiter-api:5.8.2',
                'com.google.truth:truth:1.1.3',
                'com.google.truth.extensions:truth-java8-extension:1.1.3',
                'org.mockito:mockito-core:4.3.1',
                'com.google.jimfs:jimfs:1.2',
                'rip.deadcode:izvestia:0.4.0',

                'org.slf4j:jul-to-slf4j:1.7.33', // Guava uses java.util.logging
                'ch.qos.logback:logback-classic:1.2.11'
        )
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    }

    javadoc {
        // Temporary suppress warnings
        options.addStringOption("Xdoclint:none", "-quiet")
        options.charSet = 'UTF-8'
        options.encoding = 'UTF-8'
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier.set('sources')
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier.set('javadoc')
        from javadoc.destinationDir
    }

    sourceCompatibility = 11
    targetCompatibility = 11

    compileJava {
        options.encoding = 'UTF-8'
    }

    compileTestJava {
        options.encoding = 'UTF-8'
    }

    artifacts {
        archives jar
        archives sourcesJar
        archives javadocJar
    }

    test {
        useJUnitPlatform()
        systemProperties([
                "junit.jupiter.execution.parallel.enabled"     : true,
                "junit.jupiter.execution.parallel.mode.default": "concurrent"
        ])
    }

    jacocoTestReport {
        reports {
            xml.required = true
            html.required = true
        }
    }
    check.dependsOn(jacocoTestReport)
}

task formatMarkdown(type: Exec) {
    group 'verification'
    description 'Format markdown files'

    //noinspection UnnecessaryQualifiedReference
    def os = org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.currentOperatingSystem
    if (os.isLinux()) {
        commandLine 'mdformat', '"./documentation"'
    } else if (os.isWindows()) {
        commandLine 'cmd', '/c', 'mdformat', '"./documentation"'
    } else {
        throw new RuntimeException("Unsupported operating system: ${os}")
    }
}

task formatYaml(type: Exec) {
    group 'verification'
    description 'Check formats for yaml files'

    //noinspection UnnecessaryQualifiedReference
    def os = org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.currentOperatingSystem
    if (os.isLinux()) {
        commandLine 'yamlfmt', '-conf', '.yamlfmt.yml'
    } else if (os.isWindows()) {
        commandLine 'cmd', '/c', 'yamlfmt', '-conf', '.yamlfmt.yml'
    } else {
        throw new RuntimeException("Unsupported operating system: ${os}")
    }
}

tasks.register('format') {
    dependsOn('formatMarkdown', 'formatYaml')
    group 'verification'
    description 'Format codes'
}
rootProject.task("check").dependsOn(format)

task verifyFormatMarkdown(type: Exec) {
    group 'verification'
    description 'Check formats for markdown files'

    //noinspection UnnecessaryQualifiedReference
    def os = org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.currentOperatingSystem
    if (os.isLinux()) {
        commandLine 'mdformat', '--check', '"./documentation"'
    } else if (os.isWindows()) {
        commandLine 'cmd', '/c', 'mdformat', '--check', '"./documentation"'
    } else {
        throw new RuntimeException("Unsupported operating system: ${os}")
    }
}

task verifyFormatYaml(type: Exec) {
    group 'verification'
    description 'Check formats for yaml files'

    //noinspection UnnecessaryQualifiedReference
    def os = org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.currentOperatingSystem
    if (os.isLinux()) {
        commandLine 'yamlfmt', '-lint', '-conf', '.yamlfmt.yml'
    } else if (os.isWindows()) {
        commandLine 'cmd', '/c', 'yamlfmt', '-lint', '-conf', '.yamlfmt.yml'
    } else {
        throw new RuntimeException("Unsupported operating system: ${os}")
    }
}

tasks.register('verifyFormat') {
    dependsOn('verifyFormatMarkdown', 'verifyFormatYaml')
    group 'verification'
    description 'Check formats for codes'
}
